let Joi,JwtService,User,RefreshToken,bcrypt,CustomErrorHandler,REFRESH_SECRET;_bca‍.x([["default",()=>_bca‍.o]]);_bca‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_bca‍.w("../../Services/JWTService",[["default",["JwtService"],function(v){JwtService=v}]]);_bca‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_bca‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_bca‍.w("../../Services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_bca‍.w("../../Config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);





const loginController = {
  async login(req, res, next) {
    // validation
    const LoginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp('^[a-zA-Z0-9]{3,30}$'))
        .required(),
    });

    const { error } = LoginSchema.validate(req.body);
    if (error) {
      return next(error);
    }
    try {
      const user = await User.findOne({ email: req.body.email });
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }
      // compare the password
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }

      // Token
      const access_token = JwtService.sign({
        _id: user._id,
        role: user.role,
      });

      const refresh_token = JwtService.sign(
        { _id: user._id, role: user.role },
        '1y',
        REFRESH_SECRET
      );

      // database refreshtoken whitelist

      await RefreshToken.create({ token: refresh_token });

      res.json({ access_token, refresh_token });
    } catch (err) {
      return next(err);
    }
  },
};

_bca‍.d(loginController);
